import React, { useState, useEffect } from "react";
import {
  Box,
  Typography,
  Paper,
  Button,
  CircularProgress,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  SelectChangeEvent,
} from "@mui/material";
import {
  DataGrid,
  GridColDef,
  GridToolbar,
  GridCsvExportOptions,
} from "@mui/x-data-grid";
import VisibilityIcon from "@mui/icons-material/Visibility";
import {
  getBookingsByStatus,
  assignPayback,
  getAllBookings,
} from "../../services/admin/book_service";
import { getPatientBankAccount } from "../../services/authenticate/user_service";
import { formatTimeFromTimeString } from "../../utils/dateUtils";
import { PaymentStatus } from "../../types/enums";

export default function CancelAppointmentPage() {
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [canceledAppointments, setCanceledAppointments] = useState<any[]>([]);
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedAppointment, setSelectedAppointment] = useState<any>(null);
  const [processingRefund, setProcessingRefund] = useState(false);
  const [bankInfo, setBankInfo] = useState<{
    bankName: string;
    accountNumber: string;
  } | null>(null);
  const [loadingBankInfo, setLoadingBankInfo] = useState(false);
  const [bankInfoError, setBankInfoError] = useState<string | null>(null);
  const [selectedStatus, setSelectedStatus] = useState<string>("ALL");

  // Th√™m effect ƒë·ªÉ x·ª≠ l√Ω khi thay ƒë·ªïi tr·∫°ng th√°i
  useEffect(() => {
    fetchAppointments(selectedStatus);
  }, [selectedStatus]);

  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu API sang ƒë·ªãnh d·∫°ng hi·ªÉn th·ªã
  const transformAppointmentData = (apiData: any) => {
    // ƒê·∫£m b·∫£o apiData l√† m·ªôt m·∫£ng
    if (!Array.isArray(apiData)) {
      console.error("D·ªØ li·ªáu API kh√¥ng ph·∫£i l√† m·∫£ng:", apiData);
      return [];
    }

    // console.log("S·ªë l∆∞·ª£ng d·ªØ li·ªáu tr∆∞·ªõc khi chuy·ªÉn ƒë·ªïi:", apiData.length);

    const transformed = apiData
      .map((appointment, index) => {
        try {
          // ƒê·ªãnh d·∫°ng ng√†y v√† gi·ªù
          const dateStr =
            appointment.bookAppointment.workSchedule.dateAppointment;
          const timeStr =
            formatTimeFromTimeString(
              appointment.bookAppointment.workSchedule.shift.start,
              "string"
            ) +
            "-" +
            formatTimeFromTimeString(
              appointment.bookAppointment.workSchedule.shift.end,
              "string"
            );

          // Debug ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ho√†n ti·ªÅn
          // console.log(
          //   `Appointment ${index} - Payment status:`,
          //   appointment.bookAppointmentPayment.status
          // );

          return {
            id: appointment.bookAppointment.id,
            patientId: appointment.bookAppointment.patient.userId,
            patientUserId: appointment.bookAppointment.patient.userId,
            patientName: `${appointment.bookAppointment.patient.lastName} ${appointment.bookAppointment.patient.firstName}`,
            appointmentDateTime: `${dateStr} ${timeStr}`,
            appointmentId: appointment.bookAppointment.id,
            status: appointment.bookAppointment.status,
            isRefunded:
              appointment.bookAppointmentPayment.status ===
              PaymentStatus.PAY_BACK,
            paymentStatus: appointment.bookAppointmentPayment.status,
            price: appointment.bookAppointmentPayment.price.price,
            rawData: appointment.bookAppointment,
          };
        } catch (error) {
          console.error(`L·ªói khi chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu cu·ªôc h·∫πn ${index}:`, error);
          // console.error(
          //   "Chi ti·∫øt appointment g√¢y l·ªói:",
          //   JSON.stringify(appointment, null, 2)
          // );
          return null;
        }
      })
      .filter(Boolean);

    // console.log("S·ªë l∆∞·ª£ng d·ªØ li·ªáu sau khi chuy·ªÉn ƒë·ªïi:", transformed.length);
    return transformed;
  };

  // C·∫≠p nh·∫≠t h√†m fetch ƒë·ªÉ x·ª≠ l√Ω c·∫£ getAllBookings v√† getBookingsByStatus
  const fetchAppointments = async (status?: string) => {
    try {
      setLoading(true);
      setError(null);

      console.log(`üìå B·∫Øt ƒë·∫ßu l·ªçc theo tr·∫°ng th√°i:`, status || "ALL");

      let response;
      if (status && status !== "ALL") {
        // console.log(`üìå G·ªçi API getBookingsByStatus v·ªõi tr·∫°ng th√°i:`, status);
        response = await getBookingsByStatus(status);
      } else {
        // console.log(`üìå G·ªçi API getAllBookings`);
        response = await getAllBookings();
      }

      // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu
      if (response && response.data && response.data.code === 200) {
        let appointmentsArray = [];

        if (response.data.data && Array.isArray(response.data.data)) {
          appointmentsArray = response.data.data;
          // console.log(
          //   `üìå Nh·∫≠n ƒë∆∞·ª£c ${appointmentsArray.length} b·∫£n ghi t·ª´ API cho tr·∫°ng th√°i:`,
          //   status || "ALL"
          // );
        } else {
          console.error("C·∫•u tr√∫c d·ªØ li·ªáu kh√¥ng mong ƒë·ª£i:", response.data);
        }

        const transformedData = transformAppointmentData(appointmentsArray);
        console.log(
          `üìå D·ªØ li·ªáu ƒë√£ chuy·ªÉn ƒë·ªïi cho tr·∫°ng th√°i [${status || "ALL"}]:`,
          transformedData.length,
          "b·∫£n ghi"
        );

        setCanceledAppointments(transformedData);
      } else {
        throw new Error("ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá");
      }
    } catch (err) {
      setError("Kh√¥ng th·ªÉ l·∫•y danh s√°ch cu·ªôc h·∫πn");
      console.error(
        `üìå L·ªói khi l·∫•y d·ªØ li·ªáu cho tr·∫°ng th√°i [${status || "ALL"}]:`,
        err
      );
    } finally {
      setLoading(false);
      console.log(`üìå Ho√†n th√†nh l·ªçc theo tr·∫°ng th√°i:`, status || "ALL");
    }
  };

  // L·∫•y th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng cho m·ªôt b·ªánh nh√¢n
  const fetchBankAccountInfo = async (patientId: string) => {
    try {
      setLoadingBankInfo(true);
      setBankInfoError(null);

      const response = await getPatientBankAccount(patientId);

      if (response && response.data && response.data.code === 200) {
        setBankInfo({
          bankName: response.data.data.bankName,
          accountNumber: response.data.data.accountNumber,
        });
      } else {
        setBankInfo(null);
        setBankInfoError("Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng");
      }
    } catch (err: any) {
      console.error("L·ªói khi l·∫•y th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng:", err);
      setBankInfo(null);

      // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p l·ªói kh√°c nhau
      if (err.response && err.response.status === 404) {
        setBankInfoError(
          "B·ªánh nh√¢n ch∆∞a c·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng"
        );
      } else {
        setBankInfoError("L·ªói khi l·∫•y th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng");
      }
    } finally {
      setLoadingBankInfo(false);
    }
  };

  // M·ªü modal v·ªõi chi ti·∫øt cu·ªôc h·∫πn v√† l·∫•y th√¥ng tin ng√¢n h√†ng
  const handleViewDetails = async (appointment: any) => {
    setSelectedAppointment(appointment);
    setModalOpen(true);

    // ƒê·∫∑t l·∫°i th√¥ng tin ng√¢n h√†ng tr∆∞·ªõc khi l·∫•y
    setBankInfo(null);
    setBankInfoError(null);

    // L·∫•y th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng b·∫±ng patientUserId
    if (appointment.patientUserId) {
      await fetchBankAccountInfo(appointment.patientUserId);
    }
  };

  // X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i ho√†n ti·ªÅn - s·ª≠ d·ª•ng API
  const handleRefundToggle = async (appointmentId: string) => {
    if (!selectedAppointment) return;

    try {
      setProcessingRefund(true);
      await assignPayback(appointmentId);

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i local sau khi g·ªçi API th√†nh c√¥ng
      setCanceledAppointments((prevAppointments) =>
        prevAppointments.map((appointment) =>
          appointment.appointmentId === appointmentId
            ? {
                ...appointment,
                isRefunded: true,
                paymentStatus: PaymentStatus.PAY_BACK,
              }
            : appointment
        )
      );

      // ƒê√≥ng modal sau khi ho√†n ti·ªÅn th√†nh c√¥ng
      setModalOpen(false);
    } catch (err) {
      setError("Kh√¥ng th·ªÉ x·ª≠ l√Ω ho√†n ti·ªÅn. Vui l√≤ng th·ª≠ l·∫°i.");
      console.error(err);
    } finally {
      setProcessingRefund(false);
    }
  };

  // ƒê·ªãnh nghƒ©a c√°c c·ªôt cho b·∫£ng d·ªØ li·ªáu - ƒë√£ lo·∫°i b·ªè c√°c c·ªôt ng√¢n h√†ng
  const columns: GridColDef[] = [
    {
      field: "patientId",
      headerName: "M√£ b·ªánh nh√¢n",
      width: 120,
      flex: 0.8,
    },
    {
      field: "patientName",
      headerName: "H·ªç t√™n",
      width: 180,
      flex: 1,
    },
    {
      field: "appointmentDateTime",
      headerName: "Ng√†y gi·ªù kh√°m",
      width: 150,
      flex: 1,
    },
    {
      field: "appointmentId",
      headerName: "M√£ l·ªãch h·∫πn",
      width: 120,
      flex: 0.8,
    },
    {
      field: "status",
      headerName: "Tr·∫°ng th√°i",
      width: 150,
      flex: 1,
      renderCell: (params) => {
        let color = "gray";
        let statusText = "Ch∆∞a x√°c ƒë·ªãnh";

        switch (params.row.status) {
          case "DONE":
            color = "green";
            statusText = "Ho√†n th√†nh";
            break;
          case "WAITING":
            color = "orange";
            statusText = "ƒêang ƒë·ª£i";
            break;
          case "CANCELLED":
            color = "red";
            statusText = "ƒê√£ h·ªßy";
            break;
          default:
            statusText = params.row.status || "Ch∆∞a x√°c ƒë·ªãnh";
        }

        return (
          <span
            style={{
              color: color,
              fontWeight: "bold",
            }}
          >
            {statusText}
          </span>
        );
      },
    },
    {
      field: "paymentStatus",
      headerName: "Tr·∫°ng th√°i thanh to√°n",
      width: 150,
      flex: 1,
      renderCell: (params) => {
        let color = "gray";
        let statusText = "Ch∆∞a x√°c ƒë·ªãnh";

        switch (params.row.paymentStatus) {
          case PaymentStatus.PAY_BACK:
            color = "green";
            statusText = "ƒê√£ ho√†n ti·ªÅn";
            break;
          case PaymentStatus.PAYED:
            color = "orange";
            statusText = "ƒê√£ thanh to√°n";
            break;
          case PaymentStatus.CANCELED:
            color = "red";
            statusText = "ƒê√£ h·ªßy thanh to√°n";
            break;
          case PaymentStatus.WAITING_PAY:
            color = "blue";
            statusText = "ƒêang ch·ªù thanh to√°n";
            break;
        }

        return (
          <span
            style={{
              color: color,
              fontWeight: "bold",
            }}
          >
            {statusText}
          </span>
        );
      },
    },
    {
      field: "actions",
      headerName: "Thao t√°c",
      width: 120,
      flex: 1,
      renderCell: (params) => (
        <Button
          variant="outlined"
          color="primary"
          size="small"
          startIcon={<VisibilityIcon />}
          onClick={() => handleViewDetails(params.row)}
        >
          Chi ti·∫øt
        </Button>
      ),
    },
  ];

  // X·ª≠ l√Ω thay ƒë·ªïi tr·∫°ng th√°i t·ª´ dropdown
  const handleStatusChange = (event: SelectChangeEvent) => {
    setSelectedStatus(event.target.value);
  };

  return (
    <Box sx={{ height: "100%", width: "100%", padding: 3 }}>
      {/* Ti√™u ƒë·ªÅ trang */}
      <Typography variant="h4" component="h1" gutterBottom>
        Danh s√°ch b·ªánh nh√¢n ƒë·∫∑t l·ªãch h·∫πn
      </Typography>

      {/* Th√¥ng b√°o l·ªói */}
      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}

      {/* Dropdown l·ªçc theo tr·∫°ng th√°i - ƒê√£ c·∫≠p nh·∫≠t ƒë·ªÉ v√¥ hi·ªáu h√≥a khi ƒëang t·∫£i */}
      <FormControl sx={{ mb: 2, minWidth: 200 }}>
        <InputLabel id="status-select-label">L·ªçc theo tr·∫°ng th√°i</InputLabel>
        <Select
          labelId="status-select-label"
          id="status-select"
          value={selectedStatus}
          label="L·ªçc theo tr·∫°ng th√°i"
          onChange={handleStatusChange}
          disabled={loading} // V√¥ hi·ªáu h√≥a dropdown khi ƒëang t·∫£i d·ªØ li·ªáu
        >
          <MenuItem value="ALL">T·∫•t c·∫£</MenuItem>
          <MenuItem value="DONE">Ho√†n th√†nh</MenuItem>
          <MenuItem value="WAITING">ƒêang ƒë·ª£i</MenuItem>
          <MenuItem value="CANCELLED">ƒê√£ h·ªßy</MenuItem>
        </Select>
      </FormControl>

      {/* B·∫£ng d·ªØ li·ªáu */}
      <Paper sx={{ width: "100%" }}>
        {loading ? (
          <Box sx={{ display: "flex", justifyContent: "center", p: 3 }}>
            <CircularProgress />
          </Box>
        ) : (
          <DataGrid
            rows={canceledAppointments}
            columns={columns}
            initialState={{
              pagination: {
                paginationModel: { pageSize: 10 },
              },
            }}
            pageSizeOptions={[5, 10, 25, 50, 100]}
            slots={{ toolbar: GridToolbar }}
            slotProps={{
              toolbar: {
                showQuickFilter: true,
                quickFilterProps: { debounceMs: 500 },
                csvOptions: {
                  fileName: "canceled-appointments",
                  delimiter: ",",
                  utf8WithBom: true,
                },
              },
            }}
            disableRowSelectionOnClick
            disableColumnFilter={false}
            disableDensitySelector={false}
            disableColumnSelector={false}
            sx={{ minHeight: 400 }}
          />
        )}
      </Paper>

      {/* Modal th√¥ng tin chi ti·∫øt ng√¢n h√†ng */}
      <Dialog
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Th√¥ng tin chi ti·∫øt ho√†n ti·ªÅn</DialogTitle>

        <DialogContent>
          {selectedAppointment && (
            <Grid container spacing={2} sx={{ mt: 1 }}>
              <Grid item xs={12}>
                <Typography variant="subtitle1">
                  <strong>B·ªánh nh√¢n:</strong> {selectedAppointment.patientName}
                </Typography>
              </Grid>
              <Grid item xs={12}>
                <Typography variant="subtitle1">
                  <strong>M√£ b·ªánh nh√¢n:</strong>{" "}
                  {selectedAppointment.patientUserId}
                </Typography>
              </Grid>
              <Grid item xs={12}>
                <Typography variant="subtitle1">
                  <strong>M√£ l·ªãch h·∫πn:</strong>{" "}
                  {selectedAppointment.appointmentId}
                </Typography>
              </Grid>
              <Grid item xs={12}>
                <Typography variant="subtitle1">
                  <strong>Ng√†y gi·ªù kh√°m:</strong>{" "}
                  {selectedAppointment.appointmentDateTime}
                </Typography>
              </Grid>
              <Grid item xs={12}>
                <Typography variant="subtitle1">
                  <strong>M√£ b√°c sƒ©:</strong>{" "}
                  {selectedAppointment.rawData?.workSchedule?.doctor?.userId ||
                    "Kh√¥ng c√≥ th√¥ng tin"}
                </Typography>
              </Grid>
              <Grid item xs={12}>
                <Typography variant="subtitle1">
                  <strong>B√°c sƒ© ph·ª• tr√°ch:</strong>{" "}
                  {selectedAppointment.rawData?.workSchedule?.doctor
                    ? `${selectedAppointment.rawData.workSchedule.doctor.lastName} ${selectedAppointment.rawData.workSchedule.doctor.firstName}`
                    : "Kh√¥ng c√≥ th√¥ng tin"}
                </Typography>
              </Grid>

              <Grid item xs={12}>
                <Typography variant="subtitle1">
                  <strong>S·ªë ti·ªÅn:</strong>{" "}
                  {new Intl.NumberFormat("vi-VN", {
                    style: "currency",
                    currency: "VND",
                  }).format(selectedAppointment.price || 0)}
                </Typography>
              </Grid>

              <Grid item xs={12} sx={{ mt: 2 }}>
                <Typography variant="h6">
                  Th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng
                </Typography>
              </Grid>

              {loadingBankInfo ? (
                <Grid
                  item
                  xs={12}
                  sx={{ display: "flex", justifyContent: "center", my: 2 }}
                >
                  <CircularProgress size={24} />
                </Grid>
              ) : bankInfoError ? (
                <Grid item xs={12}>
                  <Alert severity="warning" sx={{ mt: 1 }}>
                    {bankInfoError}
                  </Alert>
                </Grid>
              ) : bankInfo ? (
                <>
                  <Grid item xs={12}>
                    <Typography variant="subtitle1">
                      <strong>S·ªë t√†i kho·∫£n:</strong> {bankInfo.accountNumber}
                    </Typography>
                  </Grid>
                  <Grid item xs={12}>
                    <Typography variant="subtitle1">
                      <strong>T√™n ng√¢n h√†ng:</strong> {bankInfo.bankName}
                    </Typography>
                  </Grid>
                </>
              ) : (
                <Grid item xs={12}>
                  <Typography variant="body2" color="text.secondary">
                    Kh√¥ng c√≥ th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng
                  </Typography>
                </Grid>
              )}

              <Grid item xs={12} sx={{ mt: 2 }}>
                <Typography variant="subtitle1">
                  <strong>Tr·∫°ng th√°i ho√†n ti·ªÅn:</strong>{" "}
                  <span
                    style={{
                      color: selectedAppointment.isRefunded ? "green" : "red",
                      fontWeight: "bold",
                    }}
                  >
                    {selectedAppointment.isRefunded
                      ? "ƒê√£ ho√†n ti·ªÅn"
                      : "Ch∆∞a ho√†n ti·ªÅn"}
                  </span>
                </Typography>
              </Grid>
            </Grid>
          )}
        </DialogContent>

        <DialogActions>
          <Button onClick={() => setModalOpen(false)}>ƒê√≥ng</Button>
          {selectedAppointment &&
            !selectedAppointment.isRefunded &&
            selectedAppointment.status === "CANCELLED" &&
            bankInfo && (
              <Button
                variant="contained"
                color="primary"
                onClick={() =>
                  handleRefundToggle(selectedAppointment.appointmentId)
                }
                disabled={processingRefund || !bankInfo || loadingBankInfo}
              >
                {processingRefund ? "ƒêang x·ª≠ l√Ω..." : "ƒê√°nh d·∫•u ƒë√£ ho√†n ti·ªÅn"}
              </Button>
            )}
          {selectedAppointment &&
            !selectedAppointment.isRefunded &&
            selectedAppointment.status === "CANCELLED" &&
            !bankInfo &&
            !loadingBankInfo && (
              <Button variant="contained" color="primary" disabled={true}>
                Kh√¥ng th·ªÉ ho√†n ti·ªÅn (kh√¥ng c√≥ th√¥ng tin t√†i kho·∫£n)
              </Button>
            )}
        </DialogActions>
      </Dialog>
    </Box>
  );
}

// D·ªØ li·ªáu m·∫´u ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ ph√π h·ª£p v·ªõi c·∫•u tr√∫c d·ª± ki·∫øn
const mockCanceledAppointments = [
  {
    id: 6,
    patient: {
      id: 1,
      userId: "20250409000148-52838-19460614",
      firstName: "Donald",
      lastName: "Trump",
      phone: "0129384756",
      email: "donaldtrump@gmail.com",
    },
    workSchedule: {
      id: 13,
      dateAppointment: "16-04-2025",
      shift: {
        id: 2,
        shift: 2,
        start: "13-00-00",
        end: "17-00-00",
      },
      doctor: {
        id: 1,
        firstName: "Th∆∞",
        lastName: "L√™",
        specialization: "T√ÇM L√ù H·ªåC T√ÇM TH·∫¶N",
      },
    },
    numericalOrder: 1,
    note: "",
    createdAt: "16-04-2025-14-20-08",
    status: "CANCELLED",
    bankAccount: "19038211111",
    bankName: "Vietcombank",
    isRefunded: false,
  },
];
